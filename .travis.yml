# -------------------------------------------------------------------------------------------#
# ------------------------------------ELB DEPLOYMENT-----------------------------------------#
language: generic
sudo: required
services:
  - docker

# Create image to run test
before_install:
  - docker build -t ayfantis53/react-test -f ./client/Dockerfile.dev ./client

# Tests
script:
  - docker run -e CI=true ayfantis53/react-test npm test

# Production images build
after_success: 
  # Make images
  - docker build -t ayfantis53/mern-memories-client ./client
  - docker build -t ayfantis53/mern-memories-nginx ./nginx
  - docker build -t ayfantis53/mern-memories-server ./server
  # Log in docker CLI
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # Push images to DockerHub
  - docker push ayfantis53/mern-memories-client 
  - docker push ayfantis53/mern-memories-nginx
  - docker push ayfantis53/mern-memories-server 

deploy:
  provider: elasticbeanstalk
  region: "us-east-1"
  app: "memories"
  env: "memories-env"
  bucket_name: "elasticbeanstalk-us-east-1-583762202529"
  bucket_path: "memories"
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: "$AWS_SECRET_KEY"
  edge: true

# -------------------------------------------------------------------------------------------#
# ------------------------------------EKS DEPLOYMENT-----------------------------------------#
# sudo: required
# services:
#   - docker
# env:
#   global:
#     - SHA=$(git rev-parse HEAD)
# before_install:
#   # Install kubectl
#   - curl -LO https://dl.k8s.io/release/v1.22.0/bin/linux/amd64/kubectl
#   - chmod +x ./kubectl
#   - sudo mv ./kubectl /usr/local/bin/kubectl

#   # Install AWS CLI
#   - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
#   # Export environment variables for AWS CLI (using Travis environment variables)
#   - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
#   - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#   - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
#   # Setup kubectl config to use the desired AWS EKS cluster
#   - aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${AWS_EKS_CLUSTER_NAME}
  
#   - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#   - docker build -t ayfantis53/multi-client -f ./client/Dockerfile.dev ./client
#   # - aws s3 ls

#   # Load Balancer Setup
  

# script:
#   - docker run -e CI=true ayfantis53/multi-client npm test

# deploy:
#   provider: script
#   script:
#     # - docker build -t ayfantis53/mern-memories-client:latest -t ayfantis53/mern-memories-client:$SHA -f ./client/Dockerfile ./client
#     # - docker build -t ayfantis53/mern-memories-server:latest -t ayfantis53/mern-memories-server:$SHA -f ./server/Dockerfile ./server

#     # - docker push ayfantis53/mern-memories-client:latest
#     # - docker push ayfantis53/mern-memories-server:latest

#     # - docker push ayfantis53/mern-memories-client:$SHA
#     # - docker push ayfantis53/mern-memories-server:$SHA

#     - echo "starting"
#     - aws eks --region us-east-2 describe-cluster --name eks-cluster --query cluster.status
#     - kubectl get svc
#     - 
#     - echo "installing Ingress-Nginx"
#     - kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/aws/deploy.yaml
#     - 
#     - echo "applying k8 files"
#     - kubectl apply -f ./k8s/

#     # - kubectl set image deployments/server-deployment server=ayfantis53/mern-memories-server:$SHA
#     # - kubectl set image deployments/client-deployment client=ayfantis53/mern-memories-client:$SHA

#     - echo "done"
#   on:
#     branch: master


